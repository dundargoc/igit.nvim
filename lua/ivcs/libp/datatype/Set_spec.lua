local Set = require("ivcs.libp.datatype.Set")

describe("Constructor", function()
	it("Takes zero argument.", function()
		local s = Set()
		assert.are.same(Set.size(s), 0)
	end)

	it("Removes duplicate elements.", function()
		local s = Set({ "a", "b", "c", "c" })
		assert.are.same(Set.size(s), 3)
		assert.is_truthy(Set.has(s, "a"))
		assert.is_truthy(Set.has(s, "b"))
		assert.is_truthy(Set.has(s, "c"))
	end)
end)

describe("eq", function()
	it("Returns true if two sets are equal.", function()
		assert.equal(Set({ 1, 2 }), Set({ 1, 2 }))
	end)
	it("Returns false if two sets are not equal.", function()
		assert.are_not.equal(Set({ 1, 2, 3 }), Set({ 1, 2 }))
	end)
end)

describe("add", function()
	it("Sets value to true by default", function()
		local s = Set({ "a", "b" })
		Set.add(s, "c")
		assert.are.equal(s["c"], true)
	end)
	it("Respects optional value argument", function()
		local s = Set({ "a", "b" })
		Set.add(s, "c", 1)
		assert.are.equal(s["c"], 1)
	end)
	it("Does nothing if key presents", function()
		local s = Set({ "a", "b" })
		Set.add(s, "c", 1)
		assert.are.equal(s["c"], 1)
		Set.add(s, "c", 2)
		assert.are.equal(s["c"], 1)
	end)
end)

describe("remove", function()
	it("Removes element if present", function()
		local s = Set({ "a", "b" })
		Set.remove(s, "b")
		assert.falsy(Set.has(s, "b"))
	end)
	it("Does nothing if key is missing", function()
		local s = Set({ "a", "b" })
		Set.remove(s, "c")
		assert.are.equal(Set.size(s), 2)
	end)
end)

describe("has", function()
	it("Returns true if key presents", function()
		local s = Set({ "a", "b" })
		assert.truthy(Set.has(s, "a"))
		assert.truthy(Set.has(s, "b"))
	end)
	it("Returns false if key missing", function()
		local s = Set({ "a", "b" })
		assert.falsy(Set.has(s, "c"))
	end)
end)

describe("size", function()
	it("Returns the correct size", function()
		local s = Set({ "a", "b" })
		assert.are.equal(Set.size(s), 2)
		s = Set({ "a", "b", "c" })
		assert.are.equal(Set.size(s), 3)
	end)
end)

describe("iter", function()
	it("Iteratrates through its values", function()
		local s = Set({ 1, 2, 3 })
		local i = 1
		for e in Set.values(s) do
			assert.are.equal(i, e)
			i = i + 1
		end
	end)
end)

describe("intersection", function()
	it("Returns intersected values", function()
		local s1 = Set({ "a", "b", "c" })
		local s2 = Set({ "b", "c", "d" })
		assert.are.equal(Set.intersection(s1, s2), Set({ "b", "c" }))
	end)
	it("Returns empty set when no intersection", function()
		local s1 = Set({ "a", "b", "c" })
		local s2 = Set({ "d", "e" })
		assert.are.equal(Set.intersection(s1, s2), Set())
	end)
end)

describe("subtraction", function()
	it("Returns difference of set", function()
		local s1 = Set({ "a", "b", "c" })
		local s2 = Set({ "b", "c", "d" })
		assert.are.equal(s1 - s2, Set({ "a" }))
		assert.are.equal(s2 - s1, Set({ "d" }))
	end)
end)
