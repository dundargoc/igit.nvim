local Set = require('igit.lib.datatype.Set')

describe("Constructor", function()
    it("Takes zero argument.", function()
        local s = Set()
        assert.are.same(Set.size(s), 0)
    end)

    it("Removes duplicate elements.", function()
        local s = Set({'a', 'b', 'c', 'c'})
        assert.are.same(Set.size(s), 3)
        assert.is_truthy(Set.has(s, 'a'))
        assert.is_truthy(Set.has(s, 'b'))
        assert.is_truthy(Set.has(s, 'c'))
    end)
end)

describe("add", function()
    it("Sets value to true by default", function()
        local s = Set({'a', 'b'})
        Set.add(s, 'c')
        assert.are.equal(s['c'], true)
    end)
    it("Respects optional value argument", function()
        local s = Set({'a', 'b'})
        Set.add(s, 'c', 1)
        assert.are.equal(s['c'], 1)
    end)
    it("Does nothing if key presents", function()
        local s = Set({'a', 'b'})
        Set.add(s, 'c', 1)
        assert.are.equal(s['c'], 1)
        Set.add(s, 'c', 2)
        assert.are.equal(s['c'], 1)
    end)
end)

describe("remove", function()
    it("Removes element if present", function()
        local s = Set({'a', 'b'})
        Set.remove(s, 'b')
        assert.falsy(Set.has(s, 'b'))
    end)
    it("Does nothing if key is missing", function()
        local s = Set({'a', 'b'})
        Set.remove(s, 'c')
        assert.are.equal(Set.size(s), 2)
    end)
end)

describe("has", function()
    it("Returns true if key presents", function()
        local s = Set({'a', 'b'})
        assert.truthy(Set.has(s, 'a'))
        assert.truthy(Set.has(s, 'b'))
    end)
    it("Returns false if key missing", function()
        local s = Set({'a', 'b'})
        assert.falsy(Set.has(s, 'c'))
    end)
end)

describe("size", function()
    it("Returns the correct size", function()
        local s = Set({'a', 'b'})
        assert.are.equal(Set.size(s), 2)
        s = Set({'a', 'b', 'c'})
        assert.are.equal(Set.size(s), 3)
    end)
end)

describe("iter", function()
    it("Iteratrates through its values", function()
        local s = Set({1, 2, 3})
        local i = 1
        for e in Set.values(s) do
            assert.are.equal(i, e)
            i = i + 1
        end

    end)
end)
